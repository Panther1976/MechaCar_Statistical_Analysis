setwd("C:/Users/steve/Class/Module_15/R_Analysis/01_Demo")
setwd("C:/Users/steve/Class/Module_15/R_Analysis/01_Demo")
x <- 3
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
?read.csv()
# use read.csv() in our source RScript pane to read in the demo file into our R environment
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
library(jsonlite)
?fromJSON()
#use fromJSON() in our source RScript pane to read in the used car data
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[3] # numeric vector x with 10 values and want to select the third value
# select the third row of the Year column using bracket notation
demo_table[3,"Year"]
# select the same data using just number indices
demo_table[3,3]
# select the vector of vehicle classes from demo_table
demo_table$"Vehicle_Class"
# use bracket notation to select a single value
demo_table$"Vehicle_Class"[2]
# ilter our used car data demo_table2 so that we only have rows where the vehicle price is greater than $10,000
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
?subset()
# filter dataset from our used car data demo_table2 where price > 10000, drive == 4wd, and "clean" %in% title_status
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(filter_table2)
# using subset() is cleaner than using brackets, which would look like this
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
# compare the differences in average highway fuel economy (hwy) of Toyota vehicles as a function of the different cylinder sizes
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
?sample()
# sample a large vector and create a smaller vector
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
# capture the number of rows in demo_table in a variable
num_rows <- 1:nrow(demo_table)
# sample 3 of those rows
sample_rows <- sample(num_rows, 3)
View(demo_table)
# etrieve the requested data within the demo_table
demo_table[sample_rows,]
# combine all three steps
demo_table[sample(1:nrow(demo_table), 3),]
demo_table[sample(1:nrow(demo_table), 3),]
library(tidyverse)
?mutate()
# use our coworker vehicle data from the demo_table and add a column for the mileage per year, as well as label all vehicles as active
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
View(demo_table)
# group our used car data by the condition of the vehicle and determine the average mileage per condition
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
# add the maximum price for each condition, as well as add the vehicles in each category
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
View(summarize_demo)
?gather()
# load the demo2.csv file
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
# change this dataset to a long format
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
# Alternatively, you may type the following function
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
?spread()
# spread out our previous long-format data frame back to its original format
wide_table <- long_table %>% spread(key="Metric",value="Score")
# check if our newly created wide-format table is exactly the same as our original demo_table3
all.equal(demo_table_3,wide_table)
all.equal(demo_table3,wide_table)
?ggplot()
# familiarize ourselves with the mpg dataset
head(mpg)
# create a bar plot that represents the distribution of vehicle classes from the mpg dataset
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
?geom_bar()
# use dplyr's summarize() function to summarize the data, and ggplot2's geom_col() to visualize the results
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
# To change the titles of our x-axis and y-axis, we can use the xlab()and ylab()functions, respectively
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
# using a "+" sign at the end of the first line to indicate to the interpreter that the code continues onto the next line
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
# compare the differences in average highway fuel economy (hwy) of Toyota vehicles as a function of the different cylinder sizes
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
View(mpg_summary)
# Once we set up our ggplot object, we can generate our line plot using geom_line()
plt + geom_line()
# adjust the x-axis and y-axis tick values, we'll use the scale_x_discrete() and scale_y_continuous() functions
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
# reate a scatter plot to visualize the relationship between the size of each car engine (displ) versus their city fuel efficiency (cty)
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
# Once we successfully create our ggplot object, we can generate our scatter plot using the geom_point() function
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
# apply custom aesthetics to the previous example
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
# thelabs() function, which lets you customize your axis labels as well as any grouping variable labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
# attempting to create an additional visualization that uses City Fuel-Efficiency (MPG) to determine the size of the data point
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,size=cty))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
# generate a boxplot to visualize the highway fuel efficiency of our mpg dataset
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
# create a set of boxplots that compares highway fuel efficiency for each car manufacturer
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
# Customize the boxplot to be more aesthetic
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy,color)
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy,color=hwy)
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy,color=y)
geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy,color=y)
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
# visualize the average highway fuel efficiency across the type of vehicle class from 1999 to 2008
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
# look at the difference in average highway fuel efficiency across each vehicle model from 1999 to 2008
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
# recreate our previous boxplot example comparing the highway fuel efficiency across manufacturers, add our data points using the geom_point() function
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
# the data argument can be used to provide a new input data structure; otherwise, the mapping function will reference the data structure provided in the ggplot object
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
# compute the standard deviations in our dplyr summarize() function, we can layer the upper and lower standard deviation boundaries to our visualization using the geom_errorbar() function
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
# visualize the different vehicle fuel efficiency ratings by manufacturer
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
?facet_wrap()
# facet our previous example by the fuel-efficiency type
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
# test the distribution of vehicle weights from the built-in mtcars dataset
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
?shapiro.test()
#perform a quantitative Shapiro-Wilk test on our previous example
shapiro.test(mtcars$wt)
?sample_n()
# visualize the distribution of driven miles for our entire population dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
# create a sample dataset using dplyr's sample_n()function
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
# test if the miles driven from our previous sample dataset is statistically different from the miles driven in our population data
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
#Assuming our significance level was the common 0.05 percent, our p-value is above our significance level. Therefore, we do not have sufficient evidence to reject the null hypothesis, and we would state that the two means are statistically similar.
# test whether the mean miles driven of two samples from our used car dataset are statistically different.
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
# Because our samples should not contain bias, we would expect our null hypothesis to be true—our samples should not be statistically different. To confirm, we'll use the t.test() function
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
?t.test()
# generate our two data samples using the following code to practice calculating a paired t-test
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
# Now that we have our paired datasets, we can use a paired t-test to determine if there is a statistical difference in overall highway fuel efficiency between vehicles manufactured in 1999 versus 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
?aov()
# clean our data before we begin
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
# Now that we have our cleaned dataset, we can use our aov()function
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
# Due to the fact that the ANOVA model is used in many forms, the initial output of our aov() function does not contain our p-values. To retrieve our p-values, we have to wrap our aov()function in a summary() function
summary(aov(hp ~ cyl,data=mtcars_filt))
# In this case, our p-value is 1.32 ✕ 10^-8^, which is much smaller than our assumed 0.05 percent significance level. Therefore, we would state that there is sufficient evidence to reject the null hypothesis and accept that there is a significant difference in horsepower between at least one engine type and the others.
?cor()
# To practice calculating the Pearson correlation coefficient, we'll use the mtcars dataset
head(mtcars)
# test whether or not horsepower (hp) is correlated with quarter-mile race time (qsec).
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
# it appears that the quarter-mile time is negatively correlated with horsepower. In other words, as vehicle horsepower increases, vehicle quarter-mile time decreases.
# use our cor() function to quantify the strength of the correlation between our two variables
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
# From our correlation analysis, we have determined that the r-value between horsepower and quarter-mile time is -0.71, which is a strong negative correlation
# For another example, let's reuse our used_cars dataset
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
# test whether or not vehicle miles driven and selling price are correlated
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
# Compared to our previous example, our scatter plot did not help us determine whether or not our two variables are correlated
# see what happens if we calculate the Pearson correlation coefficient using the cor() function
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
# Our calculated r-value is 0.02, which means that there is a negligible correlation between miles driven and selling price in this dataset
# produce a correlation matrix for our used_cars dataset, we would first need to select our numeric columns from our data frame and convert to a matrix. Then we can provide our numeric matrix to the cor() function as follows:
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
# we look at the correlation matrix using either rows or columns, we can identify pairs of variables with strong correlation (such as selling price versus present price), or no correlation (like our previous example of miles driven versus selling price).
?lm()
# create a linear regression model
lm(qsec ~ hp,mtcars) #create linear model
# determine our p-value and our r-squared value for a simple linear regression model
summary(lm(qsec~hp,mtcars)) #summarize linear model
# the p-value of our linear regression analysis is 5.77 x 10-6, which is much smaller than our assumed significance level of 0.05%. Therefore, we can state that there is sufficient evidence to reject our null hypothesis, which means that the slope of our linear model is not zero
# calculate the data points to use for our line plot using our lm(qsec ~ hp,mtcars) coefficients
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
# Once we have calculated our line plot data points, we can plot the linear model over our scatter plot
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Using our visualization in combination with our calculated p-value and r-squared value, we have determined that there is a significant relationship between horsepower and quarter-mile time
# In R, our multiple linear regression statement is as follows
v
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
# obtain our statistical metrics
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
?chisq.test()
# test whether there is a statistical difference in the distributions of vehicle class across 1999 and 2008 from our mpg dataset
table(mpg$class,mpg$year) #generate contingency table
# pass the contingency table to the chisq.test()function
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
